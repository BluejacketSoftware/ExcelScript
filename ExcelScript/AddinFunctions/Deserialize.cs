using ExcelDna.Integration;
using ExcelScript.Internal;
using ExcelScript.Registration;
using ObjectStorage.Abstractions;
using RoslynScriptGlobals;
using ScriptingAbstractions;
using System;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using System.Xml.Serialization;

namespace ExcelScript
{
    public partial class ExcelScriptAddin
    {
        [ExcelFunction(Name = FunctionPrefix + nameof(Deserialize), IsVolatile = false, Description = "Deserializes data that was previously serialized with ExcelScript.Serialzie()")]
        [SuppressInDialog]
        public static object Deserialize(
            [ExcelArgument("Data input. Can either be the raw data as it was generated by ExcelScript.Serialize(), or can be a filepath from which to load the data")] string input)
        {
            var obj = InternalDeserialize(input);

            IStoredObject storedObj = (IStoredObject)obj;

            // Re-inject dependencies into the object
            var underlyingObj = storedObj.Object;
            InjectDependencies(underlyingObj);

            Type objType = storedObj.GetType().GetGenericArguments().Single();
            IStoredObject reStoredObj;

            // todo: maybe reflect & call correct generic method?
            if (!m_ObjectStore.AddOrUpdate(storedObj.Name, underlyingObj, objType, out reStoredObj, () => TryDispose(underlyingObj)))
                throw new InvalidOperationException("Object could not be re-added to the data store");

            return HandleNames.ToHandle(reStoredObj);
        }

        private static object InternalDeserialize(string data)
        {
            if (IsValidFilePath(data) || IsValidFilePath(Environment.ExpandEnvironmentVariables(data)))
            {
                data = Environment.ExpandEnvironmentVariables(data);

                if (!File.Exists(data))
                    throw new FileNotFoundException("The given file with serialized data was not found", data);

                data = File.ReadAllText(data);
            }

            XDocument doc;
            using (var sr = new StringReader(data))
            {
                doc = XDocument.Load(sr);
            }

            if (doc.Root.Name == "CompressedData")
            {
                string algorithm = doc.Root.Attribute("Algorithm").Value;

                switch (algorithm)
                {
                    case "gzip":
                        var compressedData = doc.Root.Value;
                        Byte[] bytes = Convert.FromBase64String(compressedData);
                        data = Unzip(bytes);
                        break;
                    default:
                        throw new InvalidOperationException($"Cannot decompress data compressed with algorithm {algorithm}");
                }
            }

            var deserialized = XmlDeserialize<SerializationWrapper>(data);
            var obj = deserialized.ContainedObject;

            return obj;
        }

        private static void InjectDependencies(object DeserializedObject)
        {
            if (DeserializedObject is ScriptingAbstractions.IScript<Globals>)
                InjectDependencies((RoslynScripting.Script<Globals>)DeserializedObject);
        }

        private static void InjectDependencies(IScript<Globals> Script)
        {
            m_ScriptFactory.Inject(Script, m_GlobalsFactory);
        }

        private static bool IsValidFilePath(string input)
        {
            try
            {
                string value = Path.GetFullPath(input);
                return !String.IsNullOrWhiteSpace(value);
            }
            catch (ArgumentException)
            {
                return false;
            }
            catch (NotSupportedException)
            {
                return false;
            }
            catch (PathTooLongException)
            {
                return false;
            }
        }

        // From http://stackoverflow.com/questions/7343465/compression-decompression-string-with-c-sharp
        private static string Unzip(byte[] bytes)
        {
            using (var msi = new MemoryStream(bytes))
            using (var mso = new MemoryStream())
            {
                using (var gs = new GZipStream(msi, CompressionMode.Decompress))
                {
                    CopyTo(gs, mso);
                }

                return Encoding.UTF8.GetString(mso.ToArray());
            }
        }

        private static T XmlDeserialize<T>(string xml)
        {
            XmlSerializer deserializer = new XmlSerializer(typeof(T));
            TextReader reader = new StringReader(xml);
            object obj = deserializer.Deserialize(reader);
            T result = (T)obj;
            reader.Close();

            return result;
        }

        private static void CopyTo(Stream src, Stream dest)
        {
            byte[] bytes = new byte[4096];

            int cnt;

            while ((cnt = src.Read(bytes, 0, bytes.Length)) != 0)
            {
                dest.Write(bytes, 0, cnt);
            }
        }

    }
}
